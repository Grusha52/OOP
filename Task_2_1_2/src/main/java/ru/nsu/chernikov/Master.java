package ru.nsu.chernikov;

import java.io.*;
import java.net.*;
import java.util.*;
import java.util.concurrent.*;

public class Master {
    private static final int PORT = 6006;
    static ConcurrentHashMap<Integer, Boolean> completedTaski = new ConcurrentHashMap<>();
    static private int taskId = 0;
    static volatile private boolean flag = false;

    public static void main(String[] args) throws IOException, InterruptedException {
        int[] numbers = {20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 9, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967,
                6998009, 6998029, 6998039, 20165149, 6998051, 6998053,
                20319251, 6997901, 6997927, 6997937, 17858849, 6997967};

        BlockingQueue<Task> taskQueue = new LinkedBlockingQueue<>(splitTasks(numbers));
        int countofTasks = numbers.length / 100 + 1;
        ExecutorService executor = Executors.newCachedThreadPool();
        ServerSocket serverSocket = new ServerSocket(PORT);
        System.out.println("Master started on port " + PORT);

        executor.submit(() -> {
            while (true) {
                if (completedTaski.size() >= countofTasks || flag) {
                    System.out.println("All tasks marked completed or found true task.");
                    try {
                        serverSocket.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    break;
                }
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        int workercount = 1;
        try {
            while (!flag) {
                Socket socket = serverSocket.accept();
                String workerId = "Worker-" + workercount++;
                WorkerInfo worker = new WorkerInfo(socket, workerId);
                System.out.println("Connected: " + workerId);
                if (flag) { break; }
                executor.submit(() -> workerLoop(worker, taskQueue));
            }
        } catch (SocketException e) {
            System.out.println("Server socket closed. Exiting accept loop.");
        }

        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.HOURS);

        System.out.println("Master terminated.");
        serverSocket.close();
    }

    private static void workerLoop(WorkerInfo worker, BlockingQueue<Task> taskQueue) {
        try (
                BufferedReader in = new BufferedReader(new InputStreamReader(worker.socket.getInputStream()));
                PrintWriter out = new PrintWriter(worker.socket.getOutputStream(), true)
        ) {
            while (!flag) {
                Task task = taskQueue.poll(5, TimeUnit.SECONDS);
                if (task == null) break;

                try {
                    sendTask(out, task);
                    String response = in.readLine();
                    if (response == null || response.trim().isEmpty()) {
                        throw new IOException("Otval");
                    }
                    boolean hasNonPrime = Boolean.parseBoolean(response);
                    if (hasNonPrime) {
                        flag = true;
                    }
                    completedTaski.put(task.id, true);
                    System.out.println(worker.id + " completed task " + task.id + ": " + hasNonPrime);
                } catch (IOException e) {
                    System.out.println("Worker " + worker.id + " failed on task " + task.id + ", requeuing...");
                    taskQueue.put(task);
                    break;
                }
            }
        } catch (Exception e) {
            System.out.println("Worker " + worker.id + " encountered fatal error");
        } finally {
            try {
                worker.socket.close();
            } catch (IOException ignored) {}
        }
    }

    private static void sendTask(PrintWriter out, Task task) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < task.numbers.length; i++) {
            sb.append(task.numbers[i]);
            if (i < task.numbers.length - 1) sb.append(",");
        }
        out.println(sb.toString());
        out.flush();
    }

    private static List<Task> splitTasks(int[] numbers) {
        List<Task> result = new ArrayList<>();
        int parts = (numbers.length + 100 - 1) / 100;

        for (int i = 0; i < parts; i++) {
            int start = i * 100;
            int end = Math.min(numbers.length, start + 100);
            result.add(new Task(Arrays.copyOfRange(numbers, start, end)));
        }
        return result;
    }

    static class Task {
        final int[] numbers;
        final Integer id = ++taskId;

        Task(int[] numbers) {
            this.numbers = numbers;
        }
    }

    static class WorkerInfo {
        final Socket socket;
        final String id;

        WorkerInfo(Socket socket, String id) {
            this.socket = socket;
            this.id = id;
        }
    }
}